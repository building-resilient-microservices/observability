services:

    zookeeper:
        container_name: zookeeper
        image: zookeeper:latest
        extra_hosts: [ 'host.docker.internal:host-gateway' ]
        restart: always
        ports:
            - 2181:2181
        volumes:
            - zookeeper:/bitnami
        environment:
            - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
            - ALLOW_ANONYMOUS_LOGIN=yes

    kafka:
        container_name: kafka
        image: &kafka-image bitnami/kafka:latest
        extra_hosts: [ 'host.docker.internal:host-gateway' ]
        restart: always
        volumes:
            - kafka:/var/run/docker.sock:/var/run/docker.sock
        ports:
            - 9092:9092
        environment:
            - KAFKA_CFG_NODE_ID=0
            - KAFKA_CFG_PROCESS_ROLES=controller,broker
            - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
            - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
            - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
            - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
            - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
            - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
        healthcheck:
            test: ["CMD", "kafka-topics.sh", "--bootstrap-server=localhost:9092", "--list"]
            start_period: 15s
            interval: 10s
        depends_on:
            - zookeeper

    init-kafka:
        image: *kafka-image
        working_dir: /opt/bitnami/kafka/bin
        entrypoint: /bin/bash
        depends_on:
            kafka:
                condition: service_healthy
        command: |
            kafka-topics.sh --create --if-not-exists --topic topic_0 --replication-factor=1 --partitions=1 --bootstrap-server kafka:9092

    kafdrop:
        container_name: kafdrop
        image: obsidiandynamics/kafdrop:latest
        extra_hosts: [ 'host.docker.internal:host-gateway' ]
        restart: always
        ports:
            - 9000:9000
        environment:
            KAFKA_BROKERCONNECT: kafka:9092
        depends_on:
            - kafka

    mysql:
        container_name: mysql
        image: mysql:latest
        extra_hosts: [ 'host.docker.internal:host-gateway' ]
        environment:
            MYSQL_ROOT_PASSWORD: password
        volumes:
            - mysql:/var/lib/mysql
            - ./docker/mysql/initdb:/docker-entrypoint-initdb.d
        ports:
            - 3306:3306

    adminer:
        container_name: adminer
        image: adminer:latest
        extra_hosts: [ 'host.docker.internal:host-gateway' ]
        environment:
            ADMINER_DEFAULT_SERVER: mysql
        depends_on:
            - mysql
        ports:
            - 8888:8080

    toxiproxy:
        container_name: toxiproxy
        image: ghcr.io/shopify/toxiproxy:latest
        extra_hosts: [ 'host.docker.internal:host-gateway' ]
        command: -host=0.0.0.0 -config /config/toxiproxy.json -proxy-metrics -runtime-metrics
        depends_on:
            - mysql
        volumes:
            - ./docker/toxiproxy:/config
        ports:
            - 8474:8474
            - 3307:3307
            - 3308:3308

    toxiproxy-ui:
        container_name: toxiproxy-ui
        image: buckle/toxiproxy-frontend:latest
        extra_hosts: [ 'host.docker.internal:host-gateway' ]
        environment:
            TOXIPROXY_URL: http://host.docker.internal:8474
        depends_on:
            - toxiproxy
        ports:
            - 8484:8080

    maildev:
        container_name: maildev
        image: djfarrelly/maildev:latest
        extra_hosts: [ 'host.docker.internal:host-gateway' ]
        ports:
            - 3001:80
            - 25:25

    tempo:
        image: grafana/tempo:latest
        extra_hosts: [ 'host.docker.internal:host-gateway' ]
        command: [ "-config.file=/etc/tempo.yaml" ]
        volumes:
            - ./docker/tempo/tempo-local.yaml:/etc/tempo.yaml:ro
            - ./tempo-data:/tmp/tempo
        ports:
            - "14268:14268"  # jaeger ingest
            - "9411:9411"    # zipkin

    loki:
        image: grafana/loki:latest
        extra_hosts: [ 'host.docker.internal:host-gateway' ]
        command: [ "-config.file=/etc/loki/local-config.yaml" ]
        ports:
            - "3100:3100"                                   # loki needs to be exposed so it receives logs
        environment:
            - JAEGER_AGENT_HOST=tempo
            - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
            - JAEGER_SAMPLER_TYPE=const
            - JAEGER_SAMPLER_PARAM=1

    prometheus:
        image: prom/prometheus:latest
        extra_hosts: [ 'host.docker.internal:host-gateway' ]
        command:
            - --enable-feature=exemplar-storage
            - --web.enable-remote-write-receiver
            - --config.file=/etc/prometheus/prometheus.yml
        volumes:
            - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
        ports:
            - "9090:9090"

    grafana:
        image: grafana/grafana:latest
        extra_hosts: [ 'host.docker.internal:host-gateway' ]
        volumes:
            - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
            - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
        environment:
            - GF_AUTH_ANONYMOUS_ENABLED=true
            - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
            - GF_AUTH_DISABLE_LOGIN_FORM=true
        ports:
            - "3000:3000"

volumes:
    mysql:
        driver: local
    prometheus:
        driver: local
    tempo:
        driver: local
    kafka:
        driver: local
    zookeeper:
        driver: local
